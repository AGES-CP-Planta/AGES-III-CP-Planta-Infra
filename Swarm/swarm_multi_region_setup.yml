- name: Configure the Docker Swarm Primary Region
  hosts: primary_region
  become: yes
  vars:
    manager_node: "{{ groups['primary_region'][0] }}"
    first_worker: "{{ groups['primary_region'][1] }}"
    ansible_python_interpreter: /usr/bin/python3
    region_role: primary
    stack_name: CP-Planta-Primary
    domain_name: "cp-planta.saccilotto.com"  # Replace with your actual domain
    reverse_zone: "1.0.10.in-addr.arpa"   # Adjust based on your subnet
    acme_email: "saccilotto.andre@gmail.com"       # Replace with your email
    pgadmin_email: "saccilotto.andre@gmail.com"    # Replace with your email
    pgadmin_password: "SecurePassword123" # Use a secure password
    primary_manager: "{{ groups['primary_region'][0] }}"
    secondary_manager: "{{ groups['secondary_region'][0] }}"

  tasks:
    - name: Remove old Docker versions
      apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
        update_cache: yes
      become: yes

    - name: Install dependencies
      apt:
        name:
          - curl
          - ca-certificates
          - git
          - acl
          - python3
          - python3-pip
          - lsb-release
        state: present
        update_cache: yes
      become: yes

    - name: Add Docker's official GPG key and save it in the recommended keyring
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      become: yes
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg
      ignore_errors: yes

    - name: Add Docker's repository
      ansible.builtin.shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      become: yes
      ignore_errors: yes

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      become: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes
      become: yes

    - name: Install Docker SDK for Python
      apt:
        name: python3-docker
        state: present
      become: yes

    - name: Add users to the Docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop:
        - "{{ ansible_ssh_user }}"
      ignore_errors: yes

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: true
      become: yes

    - name: Check if node is already part of a Swarm
      docker_swarm_info:
      register: swarm_info
      when: inventory_hostname == groups['primary_region'][0]

    - name: Initialize Swarm on primary manager
      docker_swarm:
        state: present
        advertise_addr: "{{ ansible_host }}"
      when: inventory_hostname == groups['primary_region'][0]

    - name: Get Swarm join tokens from primary manager
      docker_swarm_info:
      register: swarm_info
      delegate_to: "{{ groups['primary_region'][0] }}"
      run_once: true

    - name: Join primary workers to primary Swarm
      docker_swarm:
        state: present
        join_token: "{{ hostvars[groups['primary_region'][0]]['swarm_info']['swarm_facts']['JoinTokens']['Worker'] }}"
        remote_addrs:
          - "{{ manager_node }}"
      when: inventory_hostname != manager_node

    - name: Create DNS directory structure
      file:
        path: /home/{{ ansible_ssh_user }}/dns/zones
        state: directory
        mode: '0755'
      when: inventory_hostname == primary_manager or inventory_hostname == secondary_manager

    - name: Create Corefile
      template:
        src: ./templates/dns/Corefile.j2
        dest: /home/{{ ansible_ssh_user }}/dns/Corefile
      when: inventory_hostname == primary_manager or inventory_hostname == secondary_manager
      vars:
        domain_name: "{{ domain_name }}"
        reverse_zone: "{{ reverse_zone }}"

    - name: Create forward zone file
      template:
        src: ./templates/dns/zones/forward_zone.db.j2
        dest: "/home/{{ ansible_ssh_user }}/dns/zones/{{ domain_name }}.db"
      when: inventory_hostname == primary_manager or inventory_hostname == secondary_manager
      vars:
        domain_name: "{{ domain_name }}"
        primary_manager_ip: "{{ hostvars[primary_manager]['ansible_host'] }}"
        secondary_manager_ip: "{{ hostvars[secondary_manager]['ansible_host'] }}"

    - name: Create reverse zone file
      template:
        src: ./templates/dns/zones/reverse_zone.db.j2
        dest: "/home/{{ ansible_ssh_user }}/dns/zones/{{ reverse_zone }}.db"
      when: inventory_hostname == primary_manager or inventory_manager == secondary_manager
      vars:
        domain_name: "{{ domain_name }}"
        reverse_zone: "{{ reverse_zone }}"
        primary_manager_ip: "{{ hostvars[primary_manager]['ansible_host'] }}"
        secondary_manager_ip: "{{ hostvars[secondary_manager]['ansible_host'] }}"

    - name: Create stack.yml with primary region configuration
      template:
        src: ./templates/stack_primary.yml.j2
        dest: /home/{{ ansible_ssh_user }}/stack.yml
      delegate_to: "{{ manager_node }}"
      run_once: true
      vars:
        region: primary
        peer_region_host: "{{ groups['secondary_region'][0] }}"
        peer_region_stack: CP-Planta-Secondary

    - name: Deploy the stack on primary manager
      shell: docker stack deploy --with-registry-auth --resolve-image always -c /home/{{ ansible_ssh_user }}/stack.yml {{ stack_name }}
      args:
        chdir: /home/{{ ansible_ssh_user }}
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Update services in primary region
      shell: |
        docker service update --force {{ stack_name }}_{{ item }}
      loop:
        - backend
        - frontend
        - postgres_primary
        - postgres_replica 
        - pgadmin           
        - pgbouncer 
      delegate_to: "{{ manager_node }}"
      run_once: true
      async: 75  
      poll: 0  

    - name: Wait for services to stabilize in primary region
      retries: 10
      delay: 5
      shell: |
        running_services=$(docker service ls --filter "desired-state=running" --filter "replicas=0" -q)
        if [ -n "$running_services" ]; then
          exit 1
        fi
      delegate_to: "{{ manager_node }}"
      register: service_check
      until: service_check.rc == 0

    - name: Wait for 25 seconds to show proper service status in primary region
      wait_for:
        timeout: 25

    - name: Show service status in primary region
      command: docker service ls
      delegate_to: "{{ manager_node }}"
      run_once: true
      register: primary_service_status
    
    - name: Display primary region service status
      debug:
        var: primary_service_status.stdout_lines
        
- name: Configure the Docker Swarm Secondary Region
  hosts: secondary_region
  become: yes
  vars:
    manager_node: "{{ groups['secondary_region'][0] }}"
    first_worker: "{{ groups['secondary_region'][1] }}"
    ansible_python_interpreter: /usr/bin/python3
    region_role: secondary
    stack_name: CP-Planta-Secondary
    domain_name: "cp-planta.saccilotto.com"  # Replace with your actual domain
    reverse_zone: "1.0.10.in-addr.arpa"   # Adjust based on your subnet
    acme_email: "sacilotto.andre@gmail.com"       # Replace with your email
    pgadmin_email: "sacilotto.andre@gmail.com"    # Replace with your email
    pgadmin_password: "SecurePassword123" # Use a secure password

  tasks:
    - name: Remove old Docker versions
      apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
        update_cache: yes
      become: yes

    - name: Install dependencies
      apt:
        name:
          - curl
          - ca-certificates
          - git
          - acl
          - python3
          - python3-pip
          - lsb-release
        state: present
        update_cache: yes
      become: yes

    - name: Add Docker's official GPG key and save it in the recommended keyring
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      become: yes
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg
      ignore_errors: yes

    - name: Add Docker's repository
      ansible.builtin.shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      become: yes
      ignore_errors: yes

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      become: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes
      become: yes

    - name: Install Docker SDK for Python
      apt:
        name: python3-docker
        state: present
      become: yes

    - name: Add users to the Docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop:
        - "{{ ansible_ssh_user }}"
      ignore_errors: yes

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: true
      become: yes

    - name: Check if node is already part of a Swarm
      docker_swarm_info:
      register: swarm_info
      when: inventory_hostname == groups['secondary-region'][0]

    - name: Initialize Swarm on secondary manager
      docker_swarm:
        state: present
        advertise_addr: "{{ ansible_host }}"
      when: 
        - inventory_hostname == groups['secondary_region'][0]
        - docker_swarm_active is defined and not docker_swarm_active

    - name: Get Swarm join tokens from primary manager
      docker_swarm_info:
      register: swarm_info
      delegate_to: "{{ groups['secondary_region'][0] }}"
      run_once: true
      when: docker_swarm_active is defined and docker_swarm_active

    - name: Join secondary workers to secondary Swarm
      docker_swarm:
        state: present
        join_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
        remote_addrs:
          - "{{ manager_node }}"
      when:
        - inventory_hostname != manager_node
        - swarm_info.docker_swarm_active == false

    - name: Create stack.yml with secondary region configuration
      template:
        src: ./templates/stack_secondary.yml.j2
        dest: /home/{{ ansible_ssh_user }}/stack.yml
      delegate_to: "{{ manager_node }}"
      run_once: true
      vars:
        region: secondary
        peer_region_host: "{{ groups['primary_region'][0] }}"
        peer_region_stack: CP-Planta-Primary

    - name: Deploy the stack on secondary manager
      shell: docker stack deploy --with-registry-auth --resolve-image always -c /home/{{ ansible_ssh_user }}/stack.yml {{ stack_name }}
      args:
        chdir: /home/{{ ansible_ssh_user }}
      delegate_to: "{{ manager_node }}"
      run_once: true

    - name: Update services in secondary region
      shell: |
        docker service update --force {{ stack_name }}_{{ item }}
      loop:
        - backend
        - frontend
        - postgres_replica 
        - pgadmin           
        - pgbouncer 
      delegate_to: "{{ manager_node }}"
      run_once: true
      async: 75  
      poll: 0  

    - name: Wait for services to stabilize in secondary region
      retries: 10
      delay: 5
      shell: |
        running_services=$(docker service ls --filter "desired-state=running" --filter "replicas=0" -q)
        if [ -n "$running_services" ]; then
          exit 1
        fi
      delegate_to: "{{ manager_node }}"
      register: service_check
      until: service_check.rc == 0

    - name: Wait for 25 seconds to show proper service status in secondary region
      wait_for:
        timeout: 25

    - name: Show service status in secondary region
      command: docker service ls
      delegate_to: "{{ manager_node }}"
      run_once: true
      register: secondary_service_status
    
    - name: Display secondary region service status
      debug:
        var: secondary_service_status.stdout_lines

- name: Configure Cross-Region Database Replication
  hosts: all
  become: yes
  vars:
    primary_manager: "{{ groups['primary_region'][0] }}"
    secondary_manager: "{{ groups['secondary_region'][0] }}"
    primary_stack: CP-Planta-Primary
    secondary_stack: CP-Planta-Secondary
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Create directory for PostgreSQL template files
      file:
        path: /home/{{ ansible_ssh_user }}/postgres_config
        state: directory
        mode: '0755'
      when: inventory_hostname == primary_manager or inventory_hostname == secondary_manager

    - name: Create PostgreSQL primary configuration template
      template:
        src: ./templates/postgresql_primary.conf.j2
        dest: /home/{{ ansible_ssh_user }}/postgres_config/postgresql_primary.conf
      when: inventory_hostname == primary_manager
      vars:
        primary_host: "{{ primary_manager }}"
        standby_host: "{{ secondary_manager }}"
        replication_user: postgres
        replication_password: postgres

    - name: Create PostgreSQL replica configuration template
      template:
        src: ./templates/postgresql_replica.conf.j2
        dest: /home/{{ ansible_ssh_user }}/postgres_config/postgresql_replica.conf
      when: inventory_hostname == secondary_manager
      vars:
        primary_host: "{{ primary_manager }}"
        standby_host: "{{ secondary_manager }}"
        replication_user: postgres
        replication_password: postgres

    - name: Apply PostgreSQL primary configuration
      shell: |
        docker service update --force --mount-add type=bind,source=/home/{{ ansible_ssh_user }}/postgres_config/postgresql_primary.conf,target=/etc/postgresql/postgresql.conf {{ primary_stack }}_postgres_primary
      when: inventory_hostname == primary_manager

    - name: Apply PostgreSQL replica configuration
      shell: |
        docker service update --force --mount-add type=bind,source=/home/{{ ansible_ssh_user }}/postgres_config/postgresql_replica.conf,target=/etc/postgresql/postgresql.conf {{ secondary_stack }}_postgres_replica
      when: inventory_hostname == secondary_manager

    - name: Create pg_hba.conf for primary
      template:
        src: ./templates/pg_hba_primary.conf.j2
        dest: /home/{{ ansible_ssh_user }}/postgres_config/pg_hba_primary.conf
      when: inventory_hostname == primary_manager
      vars:
        standby_ip: "{{ hostvars[secondary_manager]['ansible_host'] }}"

    - name: Create pg_hba.conf for replica
      template:
        src: ./templates/pg_hba_replica.conf.j2
        dest: /home/{{ ansible_ssh_user }}/postgres_config/pg_hba_replica.conf
      when: inventory_hostname == secondary_manager
      vars:
        primary_ip: "{{ hostvars[primary_manager]['ansible_host'] }}"

    - name: Apply pg_hba.conf for primary
      shell: |
        docker service update --force --mount-add type=bind,source=/home/{{ ansible_ssh_user }}/postgres_config/pg_hba_primary.conf,target=/etc/postgresql/pg_hba.conf {{ primary_stack }}_postgres_primary
      when: inventory_hostname == primary_manager

    - name: Apply pg_hba.conf for replica
      shell: |
        docker service update --force --mount-add type=bind,source=/home/{{ ansible_ssh_user }}/postgres_config/pg_hba_replica.conf,target=/etc/postgresql/pg_hba.conf {{ secondary_stack }}_postgres_replica
      when: inventory_hostname == secondary_manager

    - name: Create health check script for primary region
      template:
        src: ./templates/health_check.sh.j2
        dest: /home/{{ ansible_ssh_user }}/health_check.sh
        mode: '0755'
      when: inventory_hostname == primary_manager
      vars:
        peer_region_host: "{{ secondary_manager }}"
        current_region: primary
        peer_region: secondary

    - name: Create health check script for secondary region
      template:
        src: ./templates/health_check.sh.j2
        dest: /home/{{ ansible_ssh_user }}/health_check.sh
        mode: '0755'
      when: inventory_hostname == secondary_manager
      vars:
        peer_region_host: "{{ primary_manager }}"
        current_region: secondary
        peer_region: primary

    - name: Set up cron job for health check in primary region
      cron:
        name: "Region health check"
        minute: "*/5"
        job: "/home/{{ ansible_ssh_user }}/health_check.sh"
      when: inventory_hostname == primary_manager

    - name: Set up cron job for health check in secondary region
      cron:
        name: "Region health check"
        minute: "*/5"
        job: "/home/{{ ansible_ssh_user }}/health_check.sh"
      when: inventory_hostname == secondary_manager