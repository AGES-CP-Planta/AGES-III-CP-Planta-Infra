#!/bin/bash

# Health check script for multi-region Docker Swarm
# Region: {{ current_region }}
# Peer region: {{ peer_region }}

PRIMARY_HOST="{{ hostvars[groups['primary_region'][0]]['ansible_host'] }}"
SECONDARY_HOST="{{ hostvars[groups['secondary_region'][0]]['ansible_host'] }}"
CURRENT_REGION="{{ current_region }}"
PEER_REGION="{{ peer_region }}"
PEER_HOST="{{ peer_region_host }}"

# Check if peer region is reachable
ping -c 1 $PEER_HOST > /dev/null 2>&1
PING_RESULT=$?

# Check PostgreSQL health
if [ "$CURRENT_REGION" == "primary" ]; then
    # Check primary PostgreSQL
    docker exec $(docker ps -q -f name=postgres_primary) pg_isready -h localhost > /dev/null 2>&1
    PG_RESULT=$?
else
    # Check replica PostgreSQL
    docker exec $(docker ps -q -f name=postgres_replica) pg_isready -h localhost > /dev/null 2>&1
    PG_RESULT=$?
fi

# Log results
TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
echo "[$TIMESTAMP] Region: $CURRENT_REGION - Ping to peer: $PING_RESULT - PG health: $PG_RESULT" >> /home/{{ ansible_ssh_user }}/health_check.log

# Implement failover logic if needed
if [ "$PING_RESULT" -ne 0 ]; then
    echo "[$TIMESTAMP] WARNING: Peer region $PEER_REGION is unreachable!" >> /home/{{ ansible_ssh_user }}/health_check.log
    
    # If primary region is down and this is secondary, promote to primary
    if [ "$CURRENT_REGION" == "secondary" ] && [ "$PING_RESULT" -ne 0 ]; then
        echo "[$TIMESTAMP] FAILOVER: Promoting secondary region to primary role!" >> /home/{{ ansible_ssh_user }}/health_check.log
        # Add your promotion logic here
        # For PostgreSQL failover, you might use pg_promote
    fi
fi

# Exit with status code
if [ "$PING_RESULT" -eq 0 ] && [ "$PG_RESULT" -eq 0 ]; then
    exit 0
else
    exit 1
fi